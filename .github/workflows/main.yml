# Set the name of your workflow
name: IOSBuilder

# Controls when the action will run.
# [workflow_dispatch] --> allows to run the workflow manually
# you may use the following to build on each push
# on:
# push:
# branches: [ master ]
on: [workflow_dispatch]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # In this workflow we use a single job called "build"
  build:
    # The type of runner ie, the OS that the job will run on. apart from mac windows and ubuntu are also available
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so our job can access it
     - uses: actions/checkout@v1

     - name: Create Folder for certificates and profiles
       run: |
         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
         mkdir -p ~/Library/MobileDevice/Certificates/
       
       # decode and save the p12 and provisioning files stored as secrets
     - name: Get Certificate
       id: certFileDecode
       uses: timheuer/base64-to-file@v1.0.3
       with:
        fileName: 'certificate.p12'
        encodedString: ${{ secrets.P12_BASE64 }}
     - name: Copy Certificate
       run: mv ${{ steps.certFileDecode.outputs.filePath }} ~/Library/MobileDevice/Certificates/certificate.p12
       
     - name: Get Profile
       id: profFileDecode
       uses: timheuer/base64-to-file@v1.0.3
       with:
        fileName: 'decoded.mobileprovision'
        encodedString: ${{ secrets.MOBILEPROVISION_BASE64 }}
     - name: Copy Profiles
       run: mv ${{ steps.profFileDecode.outputs.filePath }} ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision

#install the necessary dependencies
     - name: Install python and codemagic tools
       uses: actions/setup-python@v2
       with:
         python-version: 3.7
     - name: Install python dependencies
       run:  python -m pip install codemagic-cli-tools
     - name: Initialize Keychain with certificate
       run: |
         keychain initialize
         keychain add-certificates --certificate ~/Library/MobileDevice/Certificates/certificate.p12 --certificate-password ${{ secrets.cert_password }}
    
#install flutter
     - name: Flutter get
       uses: subosito/flutter-action@v1.3.2
       with:
         flutter-version: '2.10.0'
     - run: flutter pub get

#build and sign the ipa
     - name: Building IPA
       run: |
         xcode-project use-profiles
         flutter build ios --release --no-codesign
         xcode-project build-ipa --workspace ios/Runner.xcworkspace --scheme Runner --config Release
#collect the files            
     - name: collect ipa artifacts
       uses: actions/upload-artifact@v2
       with:
        name: adhoc-ipa
        # Path to the release files
        path: build/ios/ipa/*.ipa
